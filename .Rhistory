nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
predict
knn <- function(df) {
  res <- list()
  res$train <- df
  res$k <- 13
  res <- structure(res, class = "knn")
}
predict.knn <- function(obj, newdata) {
  kknn(cruise ~ ., train = obj$train, test = newdata, k = 13)
}
models <- list(linear_model, knn, rf)
t_train <- cbind(X_train, y_train)
linear_model <- function(df) {
  lm(crews ~ ., data = df)
}
models <- list(linear_model, knn, rf)
t_train <- cbind(X_train, y_train)
trained_models <- lapply(models, function(f) f(t_train))
predict.knn <- function(obj, newdata) {
  kknn(crew ~ ., train = obj$train, test = newdata, k = 13)
}
knn <- function(df) {
  res <- list()
  res$train <- df
  res$k <- 13
  res <- structure(res, class = "knn")
}
predict.knn <- function(obj, newdata) {
  kknn(crew ~ ., train = obj$train, test = newdata, k = 13)
}
linear_model <- function(df) {
  lm(crew ~ ., data = df)
}
models <- list(linear_model, knn, rf)
t_train <- cbind(X_train, y_train)
trained_models <- lapply(models, function(f) f(t_train))
lapply(trained_models, function(x) predict(x, X_test))
library(kknn)
lapply(trained_models, function(x) predict(x, X_test))
predict.knn <- function(obj, newdata) {
  out <-  kknn(crew ~ ., train = obj$train, test = newdata, k = 13)
  return(out$fitted.values)
}
linear_model <- function(df) {
  lm(crew ~ ., data = df)
}
models <- list(linear_model, knn, rf)
t_train <- cbind(X_train, y_train)
trained_models <- lapply(models, function(f) f(t_train))
lapply(trained_models, function(x) predict(x, X_test))
predict.knn <- function(obj, newdata) {
  out <-  kknn(crew ~ ., train = obj$train, test = newdata, k = 13)
  return(as.numeric(out$fitted.values))
}
linear_model <- function(df) {
  lm(crew ~ ., data = df)
}
models <- list(linear_model, knn, rf)
t_train <- cbind(X_train, y_train)
trained_models <- lapply(models, function(f) f(t_train))
lapply(trained_models, function(x) predict(x, X_test))
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
library(pander)
names(trained_models) <- sapply(trained_models, function(x) deparse(substitute(x)))
names(trained_models) <- sapply(models, function(x) deparse(substitute(x)))
models <- list(linear_model, knn, rf)
names(trained_models) <- sapply(models, function(x) deparse(substitute(x)))
names(trained_models) <- sapply(models, function(x) deparse(substitute(x)))
deparse(substitute(models[1]))
models <- list("lm" = linear_model,"knn"= knn,"rf"= rf)
trained_models <- lapply(models, function(f) f(t_train))
pander::pander(summary(trained_models[["lm"]]))
pander::pander(importance(trained_models$rf))
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
loss_mse <- function(truth, preds) {
  error <- truth - preds
  square_error <- error^2
  return(mean(square_error))
}
head(X[1])
sample(head(X[1]))
sample(head(X[1]))
sample((X[1]))
sample((X[1])) - X[1]
x[1][sample((1:nrow(X))] - X[1]
x[sample((1:nrow(X)),1] - X[1]
x[sample((1:nrow(X))),1] - 
x
x[1][sample((1:nrow(X)))] - X[1]
X[1][sample((1:nrow(X)))] - X[1]
X[sample(1:nrow(X)]]
X[sample(1:nrow(X),1]
X[sample(1:nrow(X)),1]
X[sample(1:nrow(X)),1] - X[[1]]
X[[tonnage]][sample(1:nrow(X))]
X[["tonnage"]][sample(1:nrow(X))]
X[["Tonnage"]][sample(1:nrow(X))]
X[["Tonnage"]][sample(1:nrow(X))] -  X$Tonnage
!!"Tonnage"
library(rlang)
ex = "Tonnage"
!!ex
!ex
parse(ex)
rlang::parse(ex)
rlang::parse_expr(ex)
permute_column <- function(df, col) {
  df[[col]] <- df$parse_expr(col)[sample(1:nrow(df))]
  return(df)
}
permute_column(X, "Tonnage")
permute_column <- function(df, col) {
  df[[col]] <- df$[[col]][sample(1:nrow(df))]
  return(df)
}
permute_column <- function(df, col) {
  df[[col]] <- df$[[col]][sample(1:nrow(df))]
  return(df)
}
permute_column <- function(df, col) {
  df[[col]] <- df[[col]][sample(1:nrow(df))]
  return(df)
}
permute_column(X, "Tonnage")
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y, loss), numeric(1)))
  }
permutation_importance <- function(model, x, y, 
      loss, x_train = NA, 
      y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y, loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y, loss), numeric(1)))
  }
  return(single_round_imp(x))
  # get the losses for each permutation
  
}
permutation_importance(trained_models[3]], X_test, y_test, loss_mse)
permutation_importance(trained_models[3], X_test, y_test, loss_mse)
loss_mse <- function(truth, preds) {
  error <- truth - preds
  square_error <- error^2
  return(mean(square_error))
}
get_loss <- function(model, x, y, loss) {
  loss(y, predict(model, x))
}
permute_column <- function(df, col) {
  df[[col]] <- df[[col]][sample(1:nrow(df))]
  return(df)
}
permutation_importance(trained_models[3], X_test, y_test, loss_mse)
permutation_importance(trained_models[[3]], X_test, y_test, loss_mse)
permutation_importance(trained_models[[3]], X_test, y_test, loss_mse)
permutation_importance(trained_models[[2]], X_test, y_test, loss_mse)
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
 )mse(y_test, predict(models[[1]], X_test))
loss_mse(y_test, predict(models[[1]], X_test))
loss_mse(y_test, predict(models[[1]], X_test))
models[[1]]
loss_mse(y_test, predict(trained_models[[1]], X_test))
predict(trained_models[[1]])
predict(trained_models[[1]], X_test)
predict(trained_models[[1]], X_test) - y_test
(predict(trained_models[[1]], X_test) - y_test)^2)
(predict(trained_models[[1]], X_test) - y_test)^2)
((predict(trained_models[[1]], X_test) - y_test)^2)
mean((predict(trained_models[[1]], X_test) - y_test)^2)
mean((predict(trained_models[[1]], X_test) - y_test)^2)
mean((predict(trained_models[[1]], X_test) - y_test[[1]])^2)
permutation_importance(trained_models[[1]], X_test, y_test[[1]], loss_mse)
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, 
      loss, x_train = NA, 
      y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  return(single_round_imp(x))
  # get the losses for each permutation
  
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, 
      loss, x_train = NA, 
      y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- data.frame(lapply(1:n_rounds, single_round_imp(x)))
  return(no_base_res)
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, 
      loss, x_train = NA, 
      y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
permutation_importance <- function(model, x, y, 
      loss, x_train = NA, 
      y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- data.frame(lapply(1:n_rounds, function(x) single_round_imp(df))
  return(no_base_res)
}
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- data.frame(lapply(1:n_rounds, function(x) single_round_imp(df)))
  return(no_base_res)
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- data.frame(lapply(1:n_rounds, function(x) single_round_imp(df)))
  names(no_base_res) <- names(x)
  return(no_base_res)
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- data.frame(lapply(1:n_rounds, function(x) single_round_imp(df)))
  no_base_res <- t(no_base_res)
  names(no_base_res) <- names(x)
  return(no_base_res)
}
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- data.frame(lapply(1:n_rounds, function(x) single_round_imp(df)))
  no_base_res <- t(no_base_res)
  names(no_base_res) <- names(x)
  return(no_base_res)
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  no_base_res <- lapply(1:n_rounds, function(x) single_round_imp(df))
  no_base_res <- as.data.frame(do.call(rbind, no_base_res))
  names(no_base_res) <- names(x)
  return(no_base_res)
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  res <- lapply(1:n_rounds, function(x) single_round_imp(df))
  res <- as.data.frame(do.call(rbind, no_base_res))
  names(res) <- names(x)
  return(data.frame(colMeans(res)))
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  res <- lapply(1:n_rounds, function(x) single_round_imp(df))
  res <- as.data.frame(do.call(rbind, res))
  res <- as.data.frame(lapply(res, function(x) x/baseline))
  names(res) <- names(x)
  return(data.frame(colMeans(res)))
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance <- function(model, x, y, loss, x_train = NA, y_train = NA,kind = "prop", n_rounds = 5) {
  baseline <- get_loss(model, x, y[[1]], loss)
  explan <- names(x)
  single_round_imp <- function(df) {
    dfs <- lapply(explan, function(i) permute_column(x, i))
    return(vapply(dfs, function(i) get_loss(model, i, y[[1]], loss), numeric(1)))
  }
  res <- lapply(1:n_rounds, function(x) single_round_imp(df))
  res <- as.data.frame(do.call(rbind, res))
  res <- as.data.frame(lapply(res, function(x) x/baseline))
  names(res) <- names(x)
  return(as.data.frame(lapply(res, mean)))
}
permutation_importance(trained_models[[1]], X_test, y_test, loss_mse)
permutation_importance(trained_models[[2]], X_test, y_test, loss_mse)
permutation_importance(trained_models[[3]], X_test, y_test, loss_mse)
names(trained_models)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
nvim.interlace.rmd("iml.Rmd", rmddir = "/home/david/blog", envir = .GlobalEnv)
quit(save = "yes")
